export default class Websock {
    _websocket: any;
    _rQi: number;
    _rQlen: number;
    _rQbufferSize: number;
    _rQ: Uint8Array | null;
    _sQbufferSize: number;
    _sQlen: number;
    _sQ: Uint8Array | null;
    _eventHandlers: {
        message: () => void;
        open: () => void;
        close: () => void;
        error: () => void;
    };
    get readyState(): "connecting" | "open" | "unused" | "closing" | "closed" | "unknown";
    get sQ(): Uint8Array | null;
    get rQ(): Uint8Array | null;
    set rQi(arg: number);
    get rQi(): number;
    get rQlen(): number;
    rQpeek8(): number;
    rQskipBytes(bytes: any): void;
    rQshift8(): number;
    rQshift16(): number;
    rQshift32(): number;
    _rQshift(bytes: any): number;
    rQshiftStr(len: any): string;
    rQshiftBytes(len: any): Uint8Array;
    rQshiftTo(target: any, len: any): void;
    rQslice(start: any, end?: number): Uint8Array;
    rQwait(msg: any, num: any, goback: any): boolean;
    flush(): void;
    send(arr: any): void;
    sendString(str: any): void;
    off(evt: any): void;
    on(evt: any, handler: any): void;
    _allocateBuffers(): void;
    init(): void;
    open(uri: any, protocols: any): void;
    attach(rawChannel: any): void;
    close(): void;
    _encodeMessage(): Uint8Array;
    _expandCompactRQ(minFit: any): void;
    _DecodeMessage(data: any): void;
    _recvMessage(e: any): void;
}
